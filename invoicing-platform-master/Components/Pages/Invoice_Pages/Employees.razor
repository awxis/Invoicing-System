@page "/employees"
@rendermode InteractiveServer
@using Client_Invoice_System.Helpers
@using Client_Invoice_System.Models
@using Client_Invoice_System.Repositories
@using System.Globalization
@using Client_Invoice_System.Repository
@inject EmployeeRepository EmployeeRepository
@inject NavigationManager Navigation
@inject IPaginationService<Employee> PaginationService
@inject ToastService ToastService
@using Client_Invoice_System.Components
@using Client_Invoice_System.Services

<div class="d-flex align-items-center">
    <Breadcrumb />
</div>
<div class="">
    <div class="col-12 col-md-6">
        <h3>Employees (@(employees?.Count ?? 0))</h3>
    </div>
    <!-- Page Header -->
    <div class="row mb-3 mt-5">


        <div class="col-md-6">
            <div class="input-group shadow rounded" style="max-width: 300px;">
                <input type="text" class="form-control form-control-sm border-primary rounded-start" placeholder="🔍 Search..." @bind="searchQuery" @oninput="FilterEmployees">
                <button class="btn btn-primary fw-bold px-3" @onclick="FilterEmployees"><i class="bi bi-search"></i></button>
            </div>
        </div>
        <div class="col-md-6 d-flex justify-content-end">
            <button class="btn btn-primary w-30 w-md-auto" @onclick="NavigateToAddEmployee"><i class="bi bi-plus-circle me-1"></i>Add Employee</button>
        </div>

    </div>

    <div class="card p-3 shadow-lg rounded-4 bg-white div-responsive">
        <div class="table-responsive">
            <table class="table table-striped">
                <thead>
                    <tr>
                        <th><i class="bi bi-person"></i> Name</th>
                        <th><i class="bi bi-briefcase"></i> Designation</th>
                        <th class="actions-header"><i class="bi bi-tools"></i> Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @if (pagedEmployees != null && pagedEmployees.Any())
                    {
                        @foreach (var employee in pagedEmployees)
                        {
                            <tr>
                                <td>@employee.EmployeeName</td>
                                <td>@employee.Designation.DesignationName</td>
                                <td class="actions-cell">
                                    <div class="d-flex flex-row gap-2 justify-content-center">
                                        <button class="btn btn-sm btn-warning" @onclick="() => NavigateToEditEmployee(employee.EmployeeId)">
                                            <i class="bi bi-pencil-square me-1"></i> Edit
                                        </button>
                                        <button class="btn btn-sm btn-danger" @onclick="() => ShowDeleteModal(employee.EmployeeId, employee.EmployeeName)">
                                            <i class="bi bi-trash me-1"></i> Delete
                                        </button>
                                    </div>
                                </td>
                            </tr>
                        }
                    }
                    else
                    {
                        <tr>
                            <td colspan="3" class="text-center text-muted">No employees found</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>

        <!-- Pagination Controls -->
        <div class="d-flex align-items-center justify-content-center mt-3">
            <ul class="pagination mb-0">
                <li class="page-item @(CanGoPrevious ? "" : "disabled")">
                    <a class="page-link shadow-sm" href="javascript:void(0);" @onclick="PreviousPage">«</a>
                </li>
                @for (int i = 1; i <= totalPages; i++)
                {
                    <li class="page-item @(i == currentPage ? "active" : "")">
                        <a class="page-link fw-bold shadow-sm" href="javascript:void(0);" @onclick="() => ChangePage(i)">@i</a>
                    </li>
                }
                <li class="page-item @(CanGoNext ? "" : "disabled")">
                    <a class="page-link shadow-sm" href="javascript:void(0);" @onclick="NextPage">»</a>
                </li>
            </ul>
            <div class="d-flex align-items-center ms-3">
                <select class="form-select w-auto text-center shadow-sm border-primary" @onchange="SetPageSize">
                    @foreach (var size in new int[] { 5, 10, 15, 20, 50, 100 })
                    {
                        <option value="@size" selected="@(size == pageSize)">Show @size</option>
                    }
                </select>
            </div>
        </div>
    

</div>

<!-- Delete Confirmation Modal -->
@if (isDeleteModalVisible)
{
    <div class="modal-overlay">
        <div class="delete-modal">
            <p class="fw-bold">Are you sure you want to delete <span class="text-danger">@employeeToDeleteName</span>?</p>
            <div class="d-flex flex-column flex-md-row justify-content-center gap-3">
                <button class="btn btn-danger w-100 w-md-auto" @onclick="ConfirmDelete"><i class="fas fa-trash"></i>Yes, Delete</button>
                <button class="btn btn-secondary w-100 w-md-auto" @onclick="CancelDelete"><i class="bi bi-x-circle"></i>Cancel</button>
            </div>
        </div>
    </div>
}

<style>
    .container {
        max-width: 1200px;
    }

    .table-responsive {
        overflow-x: auto;
        min-width: 100%;
        display: block;
        white-space: nowrap;
        overflow-y: auto;
        max-height: 70vh;
    }

    .div-responsive {
        max-width: calc(100vw - 320px);
    }
    th, td {
        min-width: 150px;
    }

        td.nowrap {
            white-space: nowrap;
        }

    .modal-overlay {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        display: flex;
        justify-content: center;
        align-items: center;
        background: rgba(0, 0, 0, 0.5);
        z-index: 1050;
    }

    .delete-modal {
        background: white;
        padding: 20px;
        border-radius: 8px;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.2);
        text-align: center;
        max-width: 400px;
    }

    .btn-sm {
        min-width: 70px;
    }
    tbody td {
        text-align: center;
        vertical-align: middle;
    }

    thead th {
        text-align: center;
    }
</style>
@code {
    private List<Employee> employees = new();
    private bool isDeleteModalVisible = false;
    private int employeeToDelete;
    private string employeeToDeleteName;
    private List<Employee> filteredEmployees = new();
    private List<Employee> pagedEmployees = new();
    private int employeeToDeleteId;
    private int currentPage = 1;
    private int pageSize = 5;
    private int totalRecords;
    private int totalPages;
    private bool CanGoPrevious => currentPage > 1;
    private bool CanGoNext => currentPage < totalPages;
    private string searchQuery = "";


    protected override async Task OnInitializedAsync()
    {
        try
        {
            employees = (await EmployeeRepository.GetAllAsync()).ToList();
            filteredEmployees = new List<Employee>(employees);
            PaginationService.SetPageSize(pageSize);
            await LoadEmployees();
        }
        catch (Exception ex)
        {
            ToastService.Notify("error", $"Error loading employees: {ex.Message}");
            // Console.WriteLine($"Error loading employees: {ex.Message}");
        }
    }
    private void NavigateToAddEmployee()
    {
        Navigation.NavigateTo("/add-employee");
    }

    private void NavigateToEditEmployee(int employeeId)
    {
        Navigation.NavigateTo($"/edit-employee/{employeeId}");
    }

    private void ShowDeleteModal(int employeeId, string name)
    {
        employeeToDelete = employeeId;
        employeeToDeleteName = name;
        isDeleteModalVisible = true;
    }

    private void CancelDelete()
    {
        isDeleteModalVisible = false;
    }
    private async Task ConfirmDelete()
    {
        try
        {
            await EmployeeRepository.DeleteAsync(employeeToDelete);
            employees = (await EmployeeRepository.GetAllAsync()).ToList();
            FilterEmployees();
            ToastService.Notify("success", "Employee deleted successfully.");
        }
        catch (Exception ex)
        {
            ToastService.Notify("error", $"Error deleting employee: {ex.Message}");
            // Console.WriteLine($"Error deleting employee: {ex.Message}");
        }
        finally
        {
            isDeleteModalVisible = false;
        }
    }

    private async Task LoadEmployees()
    {
        try
        {
            var result = await PaginationService.GetPagedDataAsync(filteredEmployees.AsQueryable(), currentPage);
            pagedEmployees = result.PagedData;
            totalRecords = result.TotalCount;
            totalPages = result.TotalPages;
        }
        catch (Exception ex)
        {
            ToastService.Notify("error", $"Error loading paged employees: {ex.Message}");
            // Console.WriteLine($"Error loading paged employees: {ex.Message}");
        }
    }

    private async Task SetPageSize(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value.ToString(), out int newSize))
        {
            pageSize = newSize;
            PaginationService.SetPageSize(pageSize);
            currentPage = 1;
            await LoadEmployees();
            StateHasChanged();
        }
    }

    private async Task PreviousPage()
    {
        if (currentPage > 1)
        {
            currentPage--;
            await LoadEmployees();
        }
    }

    private async Task NextPage()
    {
        if (currentPage < totalPages)
        {
            currentPage++;
            await LoadEmployees();
        }
    }
    private async Task FilterEmployees()
    {
        if (string.IsNullOrWhiteSpace(searchQuery))
        {
            filteredEmployees = new List<Employee>(employees);
        }
        else
        {
            filteredEmployees = employees
                .Where(e => e.EmployeeName.Contains(searchQuery, StringComparison.OrdinalIgnoreCase) ||
                            (e.Designation.DesignationName != null && e.Designation.DesignationName.Contains(searchQuery, StringComparison.OrdinalIgnoreCase)))
                .ToList();
        }
        currentPage = 1;
        await LoadEmployees();
    }


    private async Task ChangePage(int page)
    {
        if (page >= 1 && page <= totalPages)
        {
            currentPage = page;
            await LoadEmployees();
        }
    }


    
}
