@page "/owner-profiles"
@rendermode InteractiveServer
@using Client_Invoice_System.Helpers
@using Client_Invoice_System.Models
@using Client_Invoice_System.Repositories
@using Client_Invoice_System.Repository
@inject OwnerRepository OwnerRepository
@inject NavigationManager Navigation
@inject ToastService ToastService
@using Client_Invoice_System.Components
@using Client_Invoice_System.Services
@inject IPaginationService<OwnerProfile> PaginationService

<div class="d-flex align-items-center">
    <Breadcrumb />
</div>
<div class="">
    <div class="col-12 col-md-6">
        <h3 class="text-dark">Owner Profiles (@(Owners?.Count ?? 0))</h3>
    </div>
    <!-- Page Header -->
    <div class="row mb-3 align-items-center">
        <div class="col-md-6">
            <div class="input-group shadow rounded" style="max-width: 300px;">
                <input type="text" class="form-control form-control-sm border-primary rounded-start" placeholder="🔍 Search..." @bind="searchQuery" @oninput="FilterOwners">
                <button class="btn btn-primary fw-bold px-3" @onclick="FilterOwners"><i class="bi bi-search"></i></button>
            </div>
        </div>
        <div class="col-md-6 d-flex justify-content-md-end mt-2 mt-md-0">
            <button class="btn btn-primary w-30 w-md-auto" @onclick="AddOwnerProfile">
                <i class="bi bi-plus-circle me-1"></i>Add New Owner Profile
            </button>
        </div>
    </div>

    <!-- Owner Table -->
    <div class="card p-3 shadow-lg rounded-4 bg-white div-responsive">
        @if (Owners != null && Owners.Any())
        {
            <div class="table-responsive">
                <table class="table table-striped text-center">
                    <thead>
                        <tr>
                            <th class="text-start"><i class="bi bi-image"></i> Logo</th>
                            <th class="text-start"><i class="bi bi-person-fill"></i> Owner Name</th>
                            <th><i class="bi bi-envelope"></i> Billing Email</th>
                            <th><i class="bi bi-telephone"></i> Phone Number</th>
                            <th><i class="bi bi-geo-alt"></i> Billing Address</th>
                            <th><i class="bi bi-globe"></i> Country</th>
                            <th><i class="bi bi-currency-exchange"></i> Currency</th>
                            <th><i class="bi bi-gear"></i> Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var owner in pagedOwnerProfile)
                        {
                            <tr>
                                <td class="text-start">
                                    @if (owner.Logo != null && owner.Logo.Length > 0)
                                    {
                                        var base64String = Convert.ToBase64String(owner.Logo);
                                        <img src="data:image/png;base64,@base64String" alt="@owner.OwnerName Logo" style="max-width: 50px; max-height: 50px;" />
                                    }
                                    else
                                    {
                                        <span>No Logo</span>
                                    }
                                </td>
                                <td class="text-start">@owner.OwnerName</td>
                                <td>@owner.BillingEmail</td>
                                <td>@owner.PhoneNumber</td>
                                <td>@owner.BillingAddress</td>
                                <!-- <td>@owner.Sortcode</td> --> <!-- Removed property -->
                                <!-- <td>@owner.AccountNumber</td> --> <!-- Removed property -->
                                <td>@(owner.CountryCurrency?.CountryName ?? "N/A")</td>
                                <td>
                                    @(string.IsNullOrWhiteSpace(owner.CustomCurrency)
                                        ? (owner.CountryCurrency?.CurrencyName ?? "N/A")
                                        : owner.CustomCurrency)
                                    (@(owner.CountryCurrency?.CurrencyCode ?? "-") - @(owner.CountryCurrency?.Symbol ?? "-"))
                                </td>
                                <td class="nowrap">
                                    <button class="btn btn-sm btn-warning me-2" @onclick="() => EditOwnerProfile(owner.Id)">
                                        <i class="bi bi-pencil-square me-1"></i>Edit
                                    </button>
                                    <button class="btn btn-sm btn-danger" @onclick="() => ShowDeleteModal(owner.Id, owner.OwnerName)">
                                        <i class="bi bi-trash me-1"></i> Delete
                                    </button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>

            <div class="d-flex align-items-center justify-content-center mt-3">
                <ul class="pagination mb-0">
                    <li class="page-item @(CanGoPrevious ? "" : "disabled")">
                        <a class="page-link shadow-sm" href="javascript:void(0);" @onclick="PreviousPage">«</a>
                    </li>
                    @for (int i = 1; i <= totalPages; i++)
                    {
                        <li class="page-item @(i == currentPage ? "active" : "")">
                            <a class="page-link fw-bold shadow-sm" href="javascript:void(0);" @onclick="() => ChangePage(i)">@i</a>
                        </li>
                    }
                    <li class="page-item @(CanGoNext ? "" : "disabled")">
                        <a class="page-link shadow-sm" href="javascript:void(0);" @onclick="NextPage">»</a>
                    </li>
                </ul>
                <div class="d-flex align-items-center ms-3">
                    <select class="form-select w-auto text-center shadow-sm border-primary" @onchange="SetPageSize">
                        @foreach (var size in new int[] { 5, 10, 15, 20, 50, 100 })
                        {
                            <option value="@size" selected="@(size == pageSize)">Show @size</option>
                        }
                    </select>
                </div>
            </div>
        }
        else
        {
            <p class="text-muted text-center">No owner profiles found.</p>
        }
    </div>
</div>

<!-- Delete Confirmation Modal -->
@if (isDeleteModalVisible)
{
    <div class="modal-overlay">
        <div class="delete-modal">
            <p class="fw-bold">Are you sure you want to delete <span class="text-danger">@ownerToDeleteName</span>?</p>
            <div class="d-flex flex-column flex-md-row justify-content-center gap-3">
                <button class="btn btn-danger w-100 w-md-auto" @onclick="ConfirmDelete">
                    <i class="bi bi-trash"></i> Yes, Delete
                </button>
                <button class="btn btn-secondary w-100 w-md-auto" @onclick="CancelDelete">
                    <i class="bi bi-x-circle"></i> Cancel
                </button>
            </div>
        </div>
    </div>
}

<style>
    .container-fluid {
        margin: auto;
    }

    .table-responsive {
        min-width: 100%;
        display: block;
        white-space: nowrap;
    }

    .div-responsive {
        max-width: calc(100vw - 330px);
    }

    tbody td, thead th {
        text-align: center;
        vertical-align: middle;
    }

    th, td {
        min-width: 150px;
    }

        td.nowrap {
            white-space: nowrap;
        }

    /* Modal Styling */
    .modal-overlay {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        display: flex;
        justify-content: center;
        align-items: center;
        background: rgba(0, 0, 0, 0.5);
        z-index: 1050;
    }

    .delete-modal {
        background: white;
        padding: 20px;
        border-radius: 8px;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.2);
        text-align: center;
        max-width: 400px;
    }
</style>

@code {
    private List<OwnerProfile> Owners = new();
    private List<OwnerProfile> filteredOwners = new();
    private List<OwnerProfile> pagedOwnerProfile = new();
    private bool isDeleteModalVisible = false;
    private int ownerToDelete;
    private string ownerToDeleteName;
    private int totalRecords;
    private int totalPages;
    private int currentPage = 1;
    private int pageSize = 5;
    private string searchQuery = "";

    protected override async Task OnInitializedAsync()
    {
        try
        {
            Owners = (await OwnerRepository.GetAllOwnerProfilesAsync()).ToList();
            PaginationService.SetPageSize(pageSize);
            await LoadOwnerProfile();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"❌ Error loading owner profiles: {ex.Message}");
        }
    }

    private void AddOwnerProfile()
    {
        Navigation.NavigateTo("/add-owner-profile");
    }

    private void EditOwnerProfile(int ownerId)
    {
        Navigation.NavigateTo($"/edit-owner-profile/{ownerId}");
    }

    private void ShowDeleteModal(int ownerId, string ownerName)
    {
        ownerToDelete = ownerId;
        ownerToDeleteName = ownerName;
        isDeleteModalVisible = true;
    }

    private void CancelDelete()
    {
        isDeleteModalVisible = false;
    }

    private async Task ConfirmDelete()
    {
        try
        {
            await OwnerRepository.DeleteOwnerProfileAsync(ownerToDelete);
            Owners = (await OwnerRepository.GetAllOwnerProfilesAsync()).ToList();
            await LoadOwnerProfile();
            ToastService.Notify("success", $"Owner profile '{ownerToDeleteName}' deleted successfully.");
        }
        catch (Exception ex)
        {
            ToastService.Notify("error", $"❌ Error deleting owner profile: {ex.Message}");
        }
        finally
        {
            isDeleteModalVisible = false;
        }
    }

    private async Task LoadOwnerProfile()
    {
        var filteredData = string.IsNullOrWhiteSpace(searchQuery)
            ? Owners
            : Owners.Where(o => o.OwnerName.Contains(searchQuery, StringComparison.OrdinalIgnoreCase)).ToList();

        var result = await PaginationService.GetPagedDataAsync(filteredData.AsQueryable(), currentPage);
        pagedOwnerProfile = result.PagedData;
        totalRecords = result.TotalCount;
        totalPages = result.TotalPages;
    }

    private async Task SetPageSize(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out int newSize))
        {
            pageSize = newSize;
            PaginationService.SetPageSize(pageSize);
            currentPage = 1;
            await LoadOwnerProfile();
        }
    }

    private async Task PreviousPage()
    {
        if (CanGoPrevious)
        {
            currentPage--;
            await LoadOwnerProfile();
        }
    }

    private async Task NextPage()
    {
        if (CanGoNext)
        {
            currentPage++;
            await LoadOwnerProfile();
        }
    }

    private async Task ChangePage(int page)
    {
        if (page >= 1 && page <= totalPages)
        {
            currentPage = page;
            await LoadOwnerProfile();
        }
    }

    private async Task FilterOwners()
    {
        if (string.IsNullOrWhiteSpace(searchQuery))
        {
            filteredOwners = new List<OwnerProfile>(Owners);
        }
        else
        {
            filteredOwners = Owners
                .Where(o => o.OwnerName.Contains(searchQuery, StringComparison.OrdinalIgnoreCase) ||
                            o.BillingEmail.Contains(searchQuery, StringComparison.OrdinalIgnoreCase) ||
                            (o.PhoneNumber != null && o.PhoneNumber.Contains(searchQuery, StringComparison.OrdinalIgnoreCase)) || // Added null check
                            (o.BillingAddress != null && o.BillingAddress.Contains(searchQuery, StringComparison.OrdinalIgnoreCase))) // Added null check and removed BankName
                            // o.BankName.Contains(searchQuery, StringComparison.OrdinalIgnoreCase)) // Removed property
                .ToList();
        }
        currentPage = 1;
        await LoadOwnerProfile();
    }

    private bool CanGoPrevious => currentPage > 1;
    private bool CanGoNext => currentPage < totalPages;
}