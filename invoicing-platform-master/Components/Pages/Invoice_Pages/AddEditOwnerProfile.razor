@page "/add-owner-profile"
@page "/edit-owner-profile/{OwnerId:int}"
@rendermode InteractiveServer
@using Client_Invoice_System.Models
@using Client_Invoice_System.Models
@using Client_Invoice_System.Repositories  @* Keep for CountryCurrencyRepository if specific methods are used *@
@using Client_Invoice_System.Repository

@using Client_Invoice_System.Services

@inject OwnerService OwnerService
@inject CountryCurrencyRepository CountryCurrencyRepository
@inject NavigationManager Navigation
@inject ToastService ToastService

<div class="d-flex align-items-center">
    <Breadcrumb />
</div>

<EditForm Model="Owner" OnValidSubmit="SaveOwnerProfile">
    <DataAnnotationsValidator />

    <div class="d-flex justify-content-center">
        <div class="card shadow p-4" style="max-width: 900px; width: 100%;">
            <h3 class="text-center text-primary mb-4">@((Owner.Id == 0) ? "Add Owner Profile" : "Edit Owner Profile")</h3>

            <div class="row">
                <div class="col-md-6 mb-3">
                    <label class="form-label fw-bold">Owner Name</label>
                    <input type="text" class="form-control" @bind="Owner.OwnerName" />
                    <ValidationMessage For="@(() => Owner.OwnerName)" class="text-danger" />
                </div>

                <div class="col-md-6 mb-3">
                    <label class="form-label fw-bold">Billing Email</label>
                    <input type="email" class="form-control" @bind="Owner.BillingEmail" />
                    <ValidationMessage For="@(() => Owner.BillingEmail)" class="text-danger" />
                </div>

                <div class="col-md-6 mb-3">
                    <label class="form-label fw-bold">Phone Number</label>
                    <input type="tel" class="form-control" @bind="Owner.PhoneNumber" />
                    <ValidationMessage For="@(() => Owner.PhoneNumber)" class="text-danger" />
                </div>

                <div class="col-md-6 mb-3">
                    <label class="form-label fw-bold">Billing Address</label>
                    <textarea class="form-control" @bind="Owner.BillingAddress"></textarea>
                    <ValidationMessage For="@(() => Owner.BillingAddress)" class="text-danger" />
                </div>

                <!-- Country & Currency Selection -->
                <div class="col-md-6 mb-3">
                    <label class="form-label fw-bold">Country & Currency</label>
                    <select class="form-control" @onchange="OnCountryChange">
                        <option value="">Select Country & Currency</option>
                        @foreach (var item in CountryCurrencyList)
                        {
                            <option value="@item.Id" selected="@(item.Id == Owner.CountryCurrencyId)">
                                @($"{item.CountryName} ({item.CurrencyCode} - {item.Symbol})")
                            </option>
                        }
                    </select>
                    <ValidationMessage For="@(() => Owner.CountryCurrencyId)" class="text-danger" />
                </div>

                <!-- Auto-selected Currency -->
                <div class="col-md-6 mb-3">
                    <label class="form-label fw-bold">Default Currency</label>
                    <input type="text" class="form-control" value="@SelectedCurrency" readonly />
                </div>

                <div class="col-md-6 mb-3">
                    <label class="form-label fw-bold">Custom Currency (Optional)</label>
                    <input type="text" class="form-control" @bind="Owner.CustomCurrency" placeholder="Override Default Currency" />
                    <ValidationMessage For="@(() => Owner.CustomCurrency)" class="text-danger" />
                </div>

                <!-- Logo Upload -->
                <div class="col-md-6 mb-3">
                    <label class="form-label fw-bold">Logo (Optional)</label>
                    <InputFile class="form-control" OnChange="HandleFileSelected" accept="image/png,image/jpeg" />
                    @if (Owner.Logo != null && Owner.Logo.Length > 0)
                    {
                        <div class="mt-2">
                            <img src="data:image/png;base64,@Convert.ToBase64String(Owner.Logo)" alt="Logo Preview" style="max-width: 100px; max-height: 100px;" />
                            <button type="button" class="btn btn-sm btn-danger ms-2" @onclick="RemoveLogo">
                                <i class="bi bi-trash me-1"></i>Remove Logo
                            </button>
                        </div>
                    }
                </div>

                <div class="d-flex justify-content-end mt-4">
                    <button type="button" class="btn btn-secondary me-3" @onclick="Cancel">
                        <i class="bi bi-x-circle me-1"></i>Cancel
                    </button>
                    <button type="submit" class="btn btn-primary">
                        @if (Owner.Id == 0)
                        {
                            <text><i class="bi bi-save me-1"></i>Save</text>
                        }
                        else
                        {
                            <text><i class="bi bi-pencil-square me-1"></i>Update</text>
                        }
                    </button>
                </div>
            </div>

            <!-- Bank Accounts Section -->
            <div class="mt-4">
                <h4>Bank Accounts</h4>

                @if (Owner.Id == 0)
                {
                    <div class="alert alert-info">
                        <i class="bi bi-info-circle me-2"></i>Please save the owner profile first to add bank accounts.
                    </div>
                }
                else
                {
                    <button type="button" class="btn btn-primary mb-3" @onclick="() => ShowBankAccountModal(null)">
                        <i class="bi bi-plus-circle me-1"></i> Add Bank Account
                    </button>

                    @if (Owner.BankAccounts?.Any() == true)
                    {
                        <div class="table-responsive">
                            <table class="table table-striped table-hover">
                                <thead>
                                    <tr>
                                        <th>Label</th>
                                        <th>Bank Name</th>
                                        <th>Account Number</th>
                                        <th>Currency</th>
                                        <th class="text-center">Default</th>
                                        <th class="text-center">Actions</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var account in Owner.BankAccounts)
                                    {
                                        <tr>
                                            <td>@account.Label</td>
                                            <td>@account.BankName</td>
                                            <td>@account.AccountNumber</td>
                                            <td>@account.CountryCurrency?.CurrencyCode</td>
                                            <td class="text-center">
                                                @if (account.IsDefault)
                                                {
                                                    <span class="badge bg-success">Yes</span>
                                                }
                                                else
                                                {
                                                    <span class="badge bg-secondary">No</span>
                                                }
                                            </td>
                                            <td class="text-center">
                                                <button type="button" class="btn btn-sm btn-light me-2" @onclick="@(() => ShowBankAccountModal(account))">
                                                    <i class="bi bi-pencil"></i> Edit
                                                </button>
                                                <button type="button" class="btn btn-sm btn-danger" @onclick="@(() => DeleteBankAccount(account.Id))">
                                                    <i class="bi bi-trash"></i> Delete
                                                </button>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    }
                    else
                    {
                        <div class="alert alert-warning mt-3">
                            <i class="bi bi-exclamation-circle me-2"></i>No bank accounts added yet. Click "Add Bank Account" to create one.
                        </div>
                    }
                }
            </div>

            <!-- Bank Account Modal -->
            @if (showBankAccountModal)
            {
                <div class="modal fade show" style="display: block; background-color: rgba(0,0,0,0.5);" tabindex="-1">
                    <div class="modal-dialog modal-lg">
                        <div class="modal-content">
                            <div class="modal-header">
                                <h5 class="modal-title">@(currentBankAccount?.Id == 0 ? "Add" : "Edit") Bank Account</h5>
                                <button type="button" class="btn-close" @onclick="CloseBankAccountModal"></button>
                            </div>
                            <div class="modal-body">
                                <EditForm Model="currentBankAccount" OnValidSubmit="SaveBankAccount" Context="bankAccountForm">
                                    <DataAnnotationsValidator />
                                    <div class="row">
                                        <div class="col-md-6 mb-3">
                                            <label class="form-label">Label*</label>
                                            <input class="form-control" @bind="currentBankAccount.Label" />
                                            <ValidationMessage For="@(() => currentBankAccount.Label)" class="text-danger" />
                                        </div>
                                        <div class="col-md-6 mb-3">
                                            <label class="form-label">Bank Name*</label>
                                            <input class="form-control" @bind="currentBankAccount.BankName" />
                                            <ValidationMessage For="@(() => currentBankAccount.BankName)" class="text-danger" />
                                        </div>
                                        <div class="col-md-6 mb-3">
                                            <label class="form-label">Account Number*</label>
                                            <input class="form-control" @bind="currentBankAccount.AccountNumber" />
                                            <ValidationMessage For="@(() => currentBankAccount.AccountNumber)" class="text-danger" />
                                        </div>
                                        <div class="col-md-6 mb-3">
                                            <label class="form-label">Account Title</label>
                                            <input class="form-control" @bind="currentBankAccount.AccountTitle" />
                                        </div>
                                        <div class="col-md-6 mb-3">
                                            <label class="form-label">Currency*</label>
                                            <select class="form-control" @bind="currentBankAccount.CurrencyId">
                                                <option value="">Select Currency</option>
                                                @foreach (var currency in CountryCurrencyList)
                                                {
                                                    <option value="@currency.Id">@currency.CurrencyCode - @currency.CurrencyName</option>
                                                }
                                            </select>
                                            <ValidationMessage For="@(() => currentBankAccount.CurrencyId)" class="text-danger" />
                                        </div>
                                        <div class="col-md-6 mb-3">
                                            <label class="form-label">IBAN</label>
                                            <input class="form-control" @bind="currentBankAccount.IBAN" />
                                        </div>
                                        <div class="col-md-6 mb-3">
                                            <label class="form-label">Swift Code</label>
                                            <input class="form-control" @bind="currentBankAccount.SwiftCode" />
                                        </div>
                                        <div class="col-md-6 mb-3">
                                            <label class="form-label">Sort Code</label>
                                            <input class="form-control" @bind="currentBankAccount.SortCode" />
                                        </div>
                                        <div class="col-md-6 mb-3">
                                            <label class="form-label">Bank Branch Code</label>
                                            <input class="form-control" @bind="currentBankAccount.BankBranchCode" />
                                        </div>
                                        <div class="col-md-6 mb-3">
                                            <label class="form-label">Receiving Payment Method</label>
                                            <input class="form-control" @bind="currentBankAccount.ReceivingPaymentMethod" />
                                        </div>
                                        <div class="col-12 mb-3">
                                            <label class="form-label">Specific Bank Payment Instructions</label>
                                            <textarea class="form-control" @bind="currentBankAccount.SpecificBankPaymentInstructions"></textarea>
                                        </div>
                                        <div class="col-12 mb-3">
                                            <div class="form-check">
                                                <input class="form-check-input" type="checkbox" @bind="currentBankAccount.IsDefault" />
                                                <label class="form-check-label">Set as default account</label>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="modal-footer">
                                        <button type="button" class="btn btn-secondary" @onclick="CloseBankAccountModal">Cancel</button>
                                        <button type="submit" class="btn btn-primary">Save</button>
                                    </div>
                                </EditForm>
                            </div>
                        </div>
                    </div>
                </div>
            }

            @if (showDeleteConfirmation)
            {
                <div class="modal fade show" style="display: block; background-color: rgba(0,0,0,0.5);" tabindex="-1">
                    <div class="modal-dialog">
                        <div class="modal-content">
                            <div class="modal-header">
                                <h5 class="modal-title">Confirm Deletion</h5>
                                <button type="button" class="btn-close" @onclick="() => showDeleteConfirmation = false"></button>
                            </div>
                            <div class="modal-body">
                                <p>Are you sure you want to delete this bank account?</p>
                                <p><strong>Bank:</strong> @bankAccountToDelete?.BankName</p>
                                <p><strong>Account:</strong> @bankAccountToDelete?.AccountNumber</p>
                            </div>
                            <div class="modal-footer">
                                <button type="button" class="btn btn-secondary" @onclick="() => showDeleteConfirmation = false">Cancel</button>
                                <button type="button" class="btn btn-danger" @onclick="ConfirmDeleteBankAccount">Delete</button>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
</EditForm>

@code {
    [Parameter] public int? OwnerId { get; set; }
    private List<CountryCurrency> CountryCurrencyList = new();
    private OwnerProfile Owner = new() { CountryCurrencyId = 1, BankAccounts = new List<OwnerBankAccount>() };
    private string SelectedCurrency = "";
    private const long MaxFileSize = 10 * 1024 * 1024; // 10 MB limit
    private bool showBankAccountModal = false;
    private OwnerBankAccount currentBankAccount = new();
    private bool showDeleteConfirmation = false;
    private OwnerBankAccount? bankAccountToDelete = null;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            CountryCurrencyList = (await CountryCurrencyRepository.GetAllAsync()).ToList();
            if (OwnerId.HasValue && OwnerId.Value != 0)
            {
                Owner = await OwnerService.GetOwnerProfileByIdAsync(OwnerId.Value) ?? new OwnerProfile { CountryCurrencyId = 1 };
                Owner.BankAccounts ??= new List<OwnerBankAccount>();
            }
            else
            {
                Owner = new OwnerProfile { CountryCurrencyId = 1, BankAccounts = new List<OwnerBankAccount>() };
            }
            UpdateSelectedCurrency();
        }
        catch (Exception ex)
        {
            ToastService.Notify("error", $"Error loading data: {ex.Message}");
        }
    }

    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        var file = e.File;
        if (file == null)
        {
            ToastService.Notify("error", "No file selected.");
            return;
        }

        // Validate file type
        if (!file.ContentType.StartsWith("image/png") && !file.ContentType.StartsWith("image/jpeg"))
        {
            ToastService.Notify("error", "Only PNG and JPEG images are allowed.");
            return;
        }

        try
        {
            using var stream = new MemoryStream();
            await file.OpenReadStream(maxAllowedSize: MaxFileSize).CopyToAsync(stream);
            Owner.Logo = stream.ToArray();
            ToastService.Notify("success", "Logo uploaded successfully.");
        }
        catch (Exception ex)
        {
            ToastService.Notify("error", $"Error uploading logo: {ex.Message}");
        }
    }

    private void RemoveLogo()
    {
        Owner.Logo = null;
        ToastService.Notify("success", "Logo removed successfully.");
    }

    private async Task SaveOwnerProfile()
    {
        try
        {
            if (Owner.CountryCurrencyId == 0)
            {
                ToastService.Notify("error", "Please select a valid country and currency.");
                return;
            }

            if (Owner.Id == 0)
            {
                var createdProfile =  await OwnerService.CreateOwnerProfileAsync(Owner);
                if (createdProfile != null)
                {
                    Owner.Id = createdProfile.Id; // Update current model with the new ID
                    ToastService.Notify("success", "Owner profile added successfully. You can now add bank accounts.");
                    // Navigation.NavigateTo($"/edit-owner-profile/{Owner.Id}"); // Optional: force reload with ID
                    StateHasChanged(); // Re-render to enable bank account additions
                }
                else
                {
                    ToastService.Notify("error", "Error creating owner profile.");
                }
            }
            else
            {
                await OwnerService.UpdateOwnerProfileAsync(Owner);
                ToastService.Notify("success", "Owner profile updated successfully.");
                // No navigation, allow user to continue editing or add bank accounts
            }
            // Navigation.NavigateTo("/owner-profiles"); // Removed to stay on page
        }
        catch (Exception ex)
        {
            ToastService.Notify("error", $"Error saving owner profile: {ex.Message}");
        }
    }

    private void ShowBankAccountModal(OwnerBankAccount? account)
    {
        currentBankAccount = account != null ?
            new OwnerBankAccount
                {
                    Id = account.Id,
                    OwnerProfileId = account.OwnerProfileId,
                    Label = account.Label,
                    AccountNumber = account.AccountNumber,
                    CurrencyId = account.CurrencyId,
                    BankName = account.BankName,
                    AccountTitle = account.AccountTitle,
                    IBAN = account.IBAN,
                    SwiftCode = account.SwiftCode,
                    SortCode = account.SortCode,
                    BankBranchCode = account.BankBranchCode,
                    ReceivingPaymentMethod = account.ReceivingPaymentMethod,
                    SpecificBankPaymentInstructions = account.SpecificBankPaymentInstructions,
                    IsDefault = account.IsDefault
                } :
            new OwnerBankAccount
                {
                    OwnerProfileId = Owner.Id,
                    IsDefault = !Owner.BankAccounts.Any()
                };

        showBankAccountModal = true;
        StateHasChanged();
    }

    private void CloseBankAccountModal()
    {
        showBankAccountModal = false;
        StateHasChanged();
    }

    private async Task SaveBankAccount()
    {
        try
        {
            if (currentBankAccount.IsDefault)
            {
                // Ensure only one account is marked as default
                foreach (var account in Owner.BankAccounts)
                {
                    account.IsDefault = false;
                }
            }

            if (currentBankAccount.Id == 0)
            {
                // Add new account
                currentBankAccount.CreatedAt = DateTime.UtcNow;
                currentBankAccount.UpdatedAt = DateTime.UtcNow;
                Owner.BankAccounts.Add(currentBankAccount);
            }
            else
            {
                // Update existing account
                var existingAccount = Owner.BankAccounts.FirstOrDefault(a => a.Id == currentBankAccount.Id);
                if (existingAccount != null)
                {
                    existingAccount.Label = currentBankAccount.Label;
                    existingAccount.AccountNumber = currentBankAccount.AccountNumber;
                    existingAccount.CurrencyId = currentBankAccount.CurrencyId;
                    existingAccount.BankName = currentBankAccount.BankName;
                    existingAccount.AccountTitle = currentBankAccount.AccountTitle;
                    existingAccount.IBAN = currentBankAccount.IBAN;
                    existingAccount.SwiftCode = currentBankAccount.SwiftCode;
                    existingAccount.SortCode = currentBankAccount.SortCode;
                    existingAccount.BankBranchCode = currentBankAccount.BankBranchCode;
                    existingAccount.ReceivingPaymentMethod = currentBankAccount.ReceivingPaymentMethod;
                    existingAccount.SpecificBankPaymentInstructions = currentBankAccount.SpecificBankPaymentInstructions;
                    existingAccount.IsDefault = currentBankAccount.IsDefault;
                    existingAccount.UpdatedAt = DateTime.UtcNow;
                }
            }

            // Save the owner profile to persist changes
            await OwnerService.UpdateOwnerProfileAsync(Owner);
            ToastService.Notify("success", $"Bank account {(currentBankAccount.Id == 0 ? "added" : "updated")} successfully.");
            CloseBankAccountModal();
        }
        catch (Exception ex)
        {
            ToastService.Notify("error", $"Error saving bank account: {ex.Message}");
        }
    }

    private void Cancel()
    {
        Navigation.NavigateTo("/owner-profiles");
    }

    private void OnCountryChange(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out int selectedId))
        {
            Owner.CountryCurrencyId = selectedId;
            UpdateSelectedCurrency();
        }
    }

    private void UpdateSelectedCurrency()
    {
        var selectedCountry = CountryCurrencyList.FirstOrDefault(c => c.Id == Owner.CountryCurrencyId);
        SelectedCurrency = selectedCountry != null ? $"{selectedCountry.CurrencyName} ({selectedCountry.Symbol})" : "";
    }

    private async Task DeleteBankAccount(int bankAccountId)
    {
        bankAccountToDelete = Owner.BankAccounts.FirstOrDefault(a => a.Id == bankAccountId);
        if (bankAccountToDelete != null)
        {
            showDeleteConfirmation = true;
            //StateHasChanged();
        }
    }
    private async Task ConfirmDeleteBankAccount()
    {
        try
        {
            if (bankAccountToDelete != null)
            {
                // Soft delete implementation
                bankAccountToDelete.IsDeleted = true;
                bankAccountToDelete.UpdatedAt = DateTime.UtcNow;

                await OwnerService.UpdateOwnerProfileAsync(Owner);
                ToastService.Notify("success", "Bank account deleted successfully.");

                // Refresh the bank accounts list
                Owner = await OwnerService.GetOwnerProfileByIdAsync(Owner.Id) ?? Owner;
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            ToastService.Notify("error", $"Error deleting bank account: {ex.Message}");
        }
        finally
        {
            showDeleteConfirmation = false;
            bankAccountToDelete = null;
            StateHasChanged();
        }
    }
}