@page "/receipts"
@rendermode InteractiveServer
@using Client_Invoice_System.Models
@using Client_Invoice_System.Helpers
@using Client_Invoice_System.Repositories
@using System.Globalization
@using Client_Invoice_System.Repository
@inject NavigationManager Navigation
@inject InvoiceService InvoiceService
@inject IPaginationService<Receipt> PaginationService
@inject ToastService ToastService
@inject ReceiptRepository ReceiptRepository
@inject IJSRuntime JS
@inject IPaginationService<Receipt> PaginationService
@using Client_Invoice_System.Components
@using Client_Invoice_System.Services


<div class="d-flex align-items-center">
    <Breadcrumb />
</div>
<div class="">
    <div class="col-12 col-md-6">
        <h3>Receipts (@(receipts?.Count ?? 0))</h3>
    </div>
    <!-- Page Header -->
    <div class="row mb-3 mt-5">
        <div class="col-md-6">
            <div class="input-group shadow rounded" style="max-width: 300px;">
                <input type="text" class="form-control form-control-sm border-primary rounded-start" placeholder="🔍 Search..." @bind="searchQuery" @oninput="FilterReceipts">
                <button class="btn btn-primary fw-bold px-3" @onclick="FilterReceipts"><i class="bi bi-search"></i></button>
            </div>
        </div>
        @* <div class="col-md-6 d-flex justify-content-end">
            <button class="btn btn-primary w-30 w-md-auto" @onclick="NavigateToAddReceipt"><i class="bi bi-plus-circle me-1"></i>Add Receipt</button>
        </div> *@
    </div>

    <div class="card p-3 shadow-lg rounded-4 bg-white div-responsive">
        <div class="table-responsive">
            <table class="table table-striped">
                <thead>
                    <tr>
                        <th><i class="bi bi-person"></i> Client</th>
                        <th><i class="bi bi-calendar"></i> Generated Date</th>
                        <th><i class="bi bi-cash-stack"></i> Amount</th>
                        <th><i class="bi bi-currency-exchange"></i> Currency</th>
                        <th><i class="bi bi-calendar-check"></i> Paid Date</th>
                        <th><i></i>Status</th>
                        <th class="actions-header"><i class="bi bi-tools"></i> Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @if (pagedReceipts != null && pagedReceipts.Any())
                    {
                        @foreach (var receipt in pagedReceipts)
                        {
                            <tr>
                                <td>@receipt.Client?.Name</td>
                                <td>@receipt.Invoice_Generated_Date.ToString("d")</td>
                                <td>@receipt.TotalAmount.ToString("N2")</td>
                                <td>@receipt.CountryCurrency.CurrencyName</td>
                                <td>@receipt.Invoice_paid_Date.ToString("d")</td>
                                <td>@receipt.Status</td>
                                <td class="actions-cell">
                                    <div class="d-flex flex-row gap-2 justify-content-center">
                                        <button class="btn btn-sm btn-info me-2" @onclick="() => PreviewReceipt(receipt)">
                                            <i class="bi bi-eye"></i> Preview
                                        </button>
                                        <button class="btn btn-sm btn-primary me-2" @onclick="() => DownloadReceipt(receipt)">
                                            <i class="bi bi-download"></i> Download
                                        </button>
                                        <button class="btn btn-sm btn-success me-2" @onclick="() => ShowSendEmailModal(receipt.Id, receipt.Client?.Name)">
                                            <i class="bi bi-envelope"></i> Send Email
                                        </button>
                                    </div>
                                </td>
                            </tr>
                        }
                    }
                    else
                    {
                        <tr>
                            <td colspan="6" class="text-center text-muted">No receipts found</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>

    <!-- Pagination Controls -->
    <div class="d-flex align-items-center justify-content-center mt-3">
        <ul class="pagination mb-0">
            <li class="page-item @(CanGoPrevious ? "" : "disabled")">
                <a class="page-link shadow-sm" href="javascript:void(0);" @onclick="PreviousPage">«</a>
            </li>
            @for (int i = 1; i <= totalPages; i++)
            {
                <li class="page-item @(i == currentPage ? "active" : "")">
                    <a class="page-link fw-bold shadow-sm" href="javascript:void(0);" @onclick="() => ChangePage(i)">@i</a>
                </li>
            }
            <li class="page-item @(CanGoNext ? "" : "disabled")">
                <a class="page-link shadow-sm" href="javascript:void(0);" @onclick="NextPage">»</a>
            </li>
        </ul>
        <div class="d-flex align-items-center ms-3">
            <select class="form-select w-auto text-center shadow-sm border-primary" @onchange="SetPageSize">
                @foreach (var size in new int[] { 5, 10, 15, 20, 50, 100 })
                {
                    <option value="@size" selected="@(size == pageSize)">Show @size</option>
                }
            </select>
        </div>
    </div>

    <!-- Send Email Modal -->
    @if (isSendEmailModalVisible)
    {
        <div class="modal-overlay">
            <div class="delete-modal">
                @if (!isEmailSending)
                {
                    <p class="fw-bold text-center">Are you sure you want to send an email to <span class="text-primary">@modalClientName</span>?</p>
                    <div class="d-flex justify-content-center gap-3">
                        <button class="btn btn-success" @onclick="ConfirmSendEmail" disabled="@isEmailSending">
                            <i class="bi bi-envelope-check me-1"></i> Yes, Send
                        </button>
                        <button class="btn btn-secondary" @onclick="CancelSendEmail" disabled="@isEmailSending">
                            <i class="bi bi-x-circle me-1"></i> Cancel
                        </button>
                    </div>
                }
                else
                {
                    <div class="text-center">
                        <p class="fw-bold text-primary">📨 Sending Email...</p>
                        <div class="spinner-border text-primary" role="status">
                            <span class="visually-hidden">Loading...</span>
                        </div>
                    </div>
                }
            </div>
        </div>
    }

</div>

<style>
    .container {
        max-width: 1200px;
    }

    .table-responsive {
        overflow-x: auto;
        min-width: 100%;
        display: block;
        white-space: nowrap;
        overflow-y: auto;
        max-height: 70vh;
    }

    .div-responsive {
        max-width: calc(100vw - 320px);
    }

    th, td {
        min-width: 150px;
    }

        td.nowrap {
            white-space: nowrap;
        }

    .modal-overlay {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        display: flex;
        justify-content: center;
        align-items: center;
        background: rgba(0, 0, 0, 0.5);
        z-index: 1050;
    }

    .delete-modal {
        background: white;
        padding: 20px;
        border-radius: 8px;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.2);
        text-align: center;
        max-width: 400px;
    }

    .btn-sm {
        min-width: 70px;
    }

    tbody td {
        text-align: center;
        vertical-align: middle;
    }

    thead th {
        text-align: center;
    }
</style>

@code {
    private List<Receipt> receipts = new();
    private bool isDeleteModalVisible = false;
    private int receiptToDeleteId;
    private string receiptToDeleteName = string.Empty;
    private List<Receipt> filteredReceipts = new();
    private List<Receipt> pagedReceipts = new();
    private int currentPage = 1;
    private int pageSize = 5;
    private int totalRecords;
    private int totalPages;
    private bool CanGoPrevious => currentPage > 1;
    private bool CanGoNext => currentPage < totalPages;
    private string searchQuery = string.Empty;
    private int modalInvoiceId;
    private string modalClientName = string.Empty;
    private bool isSendEmailModalVisible = false;
    private bool isEmailSending = false;
    private List<Receipt> AllInvoices = new();
    private IQueryable<Receipt> InvoicesQuery;
    private List<Receipt> pagedInvoices = new();
    private int totalCount = 0;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // TODO: Replace with actual repository call
            receipts = (await ReceiptRepository.GetAllAsync()).ToList();

            // Sample data for demonstration


            filteredReceipts = new List<Receipt>(receipts);
            PaginationService.SetPageSize(pageSize);
            await LoadReceipts();
            await RefreshReceipts();
        }
        catch (Exception ex)
        {
            ToastService.Notify("error", $"Error loading receipts: {ex.Message}");
        }
    }

    private async Task RefreshReceipts()
    {
        AllInvoices = (await ReceiptRepository.GetAllAsync())
            .OrderByDescending(i => i.Invoice_Generated_Date)
            .ToList();
        InvoicesQuery = AllInvoices.AsQueryable();
    }

    private async Task LoadReceipts()
    {
        try
        {
            var result = await PaginationService.GetPagedDataAsync(filteredReceipts.AsQueryable(), currentPage);
            pagedReceipts = result.PagedData;
            totalRecords = result.TotalCount;
            totalPages = result.TotalPages;
        }
        catch (Exception ex)
        {
            ToastService.Notify("error", $"Error loading paged receipts: {ex.Message}");
        }
    }

    private async Task FilterReceipts()
    {
        InvoicesQuery = AllInvoices.AsQueryable();

        if (!string.IsNullOrWhiteSpace(searchQuery))
        {
            InvoicesQuery = InvoicesQuery.Where(i =>
                (i.Client != null && i.Client.Name != null && i.Client.Name.Contains(searchQuery, StringComparison.OrdinalIgnoreCase)) ||
                i.Invoice_Generated_Date.ToString("MM/dd/yyyy").Contains(searchQuery, StringComparison.OrdinalIgnoreCase) ||
                i.TotalAmount.ToString().Contains(searchQuery, StringComparison.OrdinalIgnoreCase) ||
                (i.Client != null && i.Client.CountryCurrency != null && i.Client.CountryCurrency.CurrencyName != null && i.Client.CountryCurrency.CurrencyName.Contains(searchQuery, StringComparison.OrdinalIgnoreCase)) ||
                i.Status.Contains(searchQuery, StringComparison.OrdinalIgnoreCase));
        }

        InvoicesQuery = InvoicesQuery.OrderByDescending(i => i.Invoice_Generated_Date);
        currentPage = 1;
        await LoadInvoices();
    }

    private async Task LoadInvoices()
    {
        try
        {
            var (pagedData, totalItems, totalPagesResult) = await PaginationService.GetPagedDataAsync(InvoicesQuery, currentPage);
            pagedInvoices = pagedData;
            totalCount = totalItems;
            totalPages = totalPagesResult;
            currentPage = Math.Min(currentPage, totalPages > 0 ? totalPages : 1);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error in LoadInvoices: {ex.Message}\nStackTrace: {ex.StackTrace}");
            ToastService.Notify("error", $"Error loading invoices: {ex.Message}");
        }

        await InvokeAsync(StateHasChanged);
    }

    private async Task PreviewReceipt(Receipt invoice)
    {
        try
        {
            byte[] pdfData = await InvoiceService.GenerateInvoicePdfAsync(invoice.Id, true);
            if (pdfData == null || pdfData.Length == 0)
            {
                Console.WriteLine("PreviewReceipt: PDF data is empty or null");
                ToastService.Notify("error", "Failed to generate invoice preview: PDF is empty.");
                return;
            }
            string blobUrl = await JS.InvokeAsync<string>("createBlobUrl", pdfData, "application/pdf");
            await JS.InvokeVoidAsync("window.open", blobUrl, "_blank");
            _ = Task.Delay(2000).ContinueWith(async _ =>
            {
                await JS.InvokeVoidAsync("revokeBlobUrl", blobUrl);
                Console.WriteLine($"PreviewReceipt: Blob URL revoked: {blobUrl}");
            });

            ToastService.Notify("success", $"Invoice {invoice.Id} preview opened successfully!");
            // await RefreshInvoices();
            // await LoadInvoices();
            // await FilterInvoices();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error previewing invoice: {ex.Message}\nStackTrace: {ex.StackTrace}");
            ToastService.Notify("error", $"Error previewing invoice: {ex.Message}");
        }
    }

    private async Task DownloadReceipt(Receipt receipt)
    {
        try
        {
            byte[] pdfData = await InvoiceService.GenerateInvoicePdfAsync(receipt.Id, true);
            var fileName = $"Invoice_{receipt.Id}.pdf";
            await JS.InvokeVoidAsync("downloadFileFromStream", fileName, new DotNetStreamReference(new MemoryStream(pdfData)), "application/pdf");
            ToastService.Notify("success", $"Invoice {receipt.Id} downloaded successfully!");
            // await RefreshInvoices();
            // await LoadInvoices();
            // await FilterInvoices();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error downloading invoice: {ex.Message}\nStackTrace: {ex.StackTrace}");
            ToastService.Notify("error", $"Error downloading invoice: {ex.Message}");
        }
    }

    private void ShowSendEmailModal(int invoiceId, string? clientName)
    {
        modalInvoiceId = invoiceId;
        modalClientName = clientName ?? "Unknown";
        isSendEmailModalVisible = true;
    }

    private async Task ConfirmSendEmail()
    {
        isEmailSending = true;
        await InvokeAsync(StateHasChanged);

        try
        {
            bool emailSent = await InvoiceService.SendInvoiceToClientAsync(modalInvoiceId, null, true, null, true);
            if (emailSent)
            {
                ToastService.Notify("success", $"Email sent successfully for invoice {modalInvoiceId}!");
                // await RefreshInvoices();
                // await LoadInvoices();
                // await FilterInvoices();
            }
            else
            {
                ToastService.Notify("error", "Failed to send email.");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error sending email: {ex.Message}\nStackTrace: {ex.StackTrace}");
            ToastService.Notify("error", $"Error sending email: {ex.Message}");
        }
        finally
        {
            isEmailSending = false;
            isSendEmailModalVisible = false;
            await InvokeAsync(StateHasChanged);
        }
    }

    private void CancelSendEmail()
    {
        isSendEmailModalVisible = false;
    }

    private async Task SetPageSize(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out int newSize))
        {
            pageSize = newSize;
            PaginationService.SetPageSize(pageSize);
            currentPage = 1;
            await LoadReceipts();
            StateHasChanged();
        }
    }

    private async Task PreviousPage()
    {
        if (currentPage > 1)
        {
            currentPage--;
            await LoadReceipts();
        }
    }

    private async Task NextPage()
    {
        if (currentPage < totalPages)
        {
            currentPage++;
            await LoadReceipts();
        }
    }

    private async Task ChangePage(int page)
    {
        if (page >= 1 && page <= totalPages)
        {
            currentPage = page;
            await LoadReceipts();
        }
    }
}